%class([phys024, hm-06, [lynn, gerbode, nichols], [ [[m, w], 800, 850, hm, 'shanahan center', b470], [[t, r], 810, 925, hm, 'shanahan center', 1430]] ]
	%[[[Days], StartTime, EndTime, Campus, Building, Room], [[Day1, Day2...], startTime, endTime, Campus, Building, Room]]



input:-
	write_ln("Please input you list of classes as generated by the scheduler app. "),
	read([First | Rest]),
	addClasses(First,Rest).

addClasses([]):-
	write_ln("Done. ").

addClasses([First | Rest]):-
	addClass(First),
	addClasses(Rest).

addClass([CourseCode, Section, [Prof1 | RestProfs]]):-
	assert(courseCode(CourseCode, 0)),
	assert(section(Section, 0)),
	professors([Prof1 | RestProfs]), %if a professor is already in the database this will make 2 copies
	assert(class([CourseCode, Section, [Prof1 | RestProfs]], 0)).

professors([]):-
	true.

professors([X | Rest]):-
	assert(prof(X, 0)),
	professors(Rest).

rateProf(Name, Value):- 
	prof(Name, _),
	retractall(prof(Name, _)),
	assert(prof(Name, Value)). 

rateCourse(Name, Value):- 
	courseCode(Name, _),
	retractall(courseCode(Name, _)),
	assert(courseCode(Name, Value)).

rateSection(Name, Value):- 
	section(Name, _),
	retractall(section(Name, _)),
	assert(section(Name, Value)).

rateClass([CourseCode, Section, [Prof1 | RestProfs]], Value):-
	class([CourseCode, Section, [Prof1 | RestProfs]], _),
	retractall(class([CourseCode, Section, [Prof1 | RestProfs]], _)),
	courseCode(CourseCode, A),
	section(Section, B),
	sumProfValue([Prof1 | RestProfs], C),
	Value is A + B + C,
	assert(class([CourseCode, Section, [Prof1 | RestProfs]], Value)).


sumProfValue([], 0):- 
	true.

sumProfValue([Prof1 | RestProfs], Value):- 
	sumProfValue(RestProfs, VRest),
	prof(Prof1, V1),
	Value is V1 + VRest.

	



