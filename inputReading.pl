%To Run: Go to the folder this file is saved in and run the command:
%		 /usr/local/bin/swipl -f inputReading.pl 
%	in terminal.

%class([phys024, hm-06, [lynn, gerbode, nichols], [ [[m, w], 800, 850, hm, 'shanahan center', b470], [[t, r], 810, 925, hm, 'shanahan center', 1430]] ]
	%[[[Days], StartTime, EndTime, Campus, Building, Room], [[Day1, Day2...], startTime, endTime, Campus, Building, Room]]

%['CHEM023A','HM-01',3,'08/30/2016','12/16/2016',['Van Hecke','Johnson','Vosburg','Hawkins'], [[0,9,9.833333333333334,'HM Campus, Shanahan Center, 2460'],
%[2,9,9.833333333333334,'HM Campus, Shanahan Center, 2460'],[4,9,9.833333333333334,'HM Campus, Shanahan Center, 2460']]]


%Read in class information from Scheduler App

%:- initialization(main).

%main :-
%	write_ln("Please input you list of classes as generated by the scheduler app. "),
%	read([First | Rest]),
%	addClasses([First | Rest]).

addClasses([]).

addClasses([First | Rest]):-
	addClass(First),
	addClasses(Rest).

addClass([CourseCode, Section, Credits, StartDate, EndDate, [Prof1 | RestProfs], [FirstTimes | RestTimes]]):-
	assert(courseCode(CourseCode, 0)),
	assert(section(CourseCode, Section, 0)),
	%if a professor is already in the database this will make 2 copies, 
	%but they will have the same rating and the extra copies will be deleted if they are given a new rating.
	professors([Prof1 | RestProfs]), 
	assert(class([CourseCode, Section, [Prof1 | RestProfs], [FirstTimes | RestTimes]], 0)).

professors([]).

professors([X | Rest]):-
	assert(prof(X, 0)),
	professors(Rest).

times([]).

times([X | Rest]):-
	assert(prof(X, 0)),
	professors(Rest).

%User usable functions to provide their relative interests in classes.
rateProf(Name, Value):- 
	prof(Name, _),
	retractall(prof(Name, _)),
	assert(prof(Name, Value)). 

rateClass(Name, Value):- 
	courseCode(Name, _),
	retractall(courseCode(Name, _)),
	assert(courseCode(Name, Value)).

rateSection(Class, Section, Value):- 
	section(Class, Section, _),
	retractall(section(Class, Name, _)),
	assert(section(Class, Name, Value)).

rateTimeBlock(Start,End, Value):-
	asserta(timeVal(start, end, value)).

rateDay(Day, Val):-
	retract(day(Day, _)),
	assert(day(Day,Val)).

setDayMaxHours(Day, Val):-
	retract(dayMaxHours(Day, _)),
	assert(dayMaxHours(Day,Val)).


setAllDaysMaxHours(Val):-
	retractall(dayMaxHours(_, 24)),
	assert(dayMaxHours(m,Val)),
	assert(dayMaxHours(t,Val)),
	assert(dayMaxHours(w,Val)),
	assert(dayMaxHours(r,Val)),
	assert(dayMaxHours(f,Val)),
	assert(dayMaxHours(s,Val)),
	assert(dayMaxHours(u,Val)).

%Value calculated based on all input about user preference for elements of a class
rateSumOfClass(CourseCode, Section):-
	class([CourseCode, Section, [Prof1 | RestProfs], [FirstTimes | RestTimes]], _),
	retractall(class([CourseCode, Section, [Prof1 | RestProfs], [FirstTimes | RestTimes]], _)),
	courseCode(CourseCode, A),
	section(Section, B),
	sumProfValue([Prof1 | RestProfs], C),
	Value is A + B + C,
	assert(class([CourseCode, Section, [Prof1 | RestProfs], [FirstTimes | RestTimes]], Value)).


sumProfValue([], 0).

sumProfValue([Prof1 | RestProfs], Value):- 
	sumProfValue(RestProfs, VRest),
	prof(Prof1, V1),
	Value is V1 + VRest.


%Having read in all the values, the following code will work to find possible schedules.



%timeConflict(X,Y).


%Additional Facts in Database
:-dynamic day/2.

day(m,0).
day(t,0).
day(w,0).
day(r,0).
day(f,0).
day(s,0).
day(u,0).

:- dynamic dayMaxHours/2. 

dayMaxHours(m,24).
dayMaxHours(t,24).
dayMaxHours(w,24).
dayMaxHours(r,24).
dayMaxHours(f,24).
dayMaxHours(s,24).
dayMaxHours(u,24).

timeVal(0,2400,0).

	


% Testing Input String: [[phys024, hm-06, [lynn, gerbode, nichols], [ [[m, w], 800, 850, hm, 'shanahan center', b470], [[t, r], 810, 925, hm, 'shanahan center', 1430]] ],[phys024, hm-05, [lynn, gerbode, saeta], [ [[m, w], 900, 950, hm, 'shanahan center', b460], [[t, r], 810, 925, hm, 'shanahan center', 1430]] ]].
